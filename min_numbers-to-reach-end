

class Solution{
    static int minJumps(int[] arr){
        // your code here
        
        
        int maxReach = arr[0];
        int steps = arr[0];
        int jumps = 1;
        int n = arr.length;
        
        if(arr[0]==0 || n<=1) return -1;
        
        for(int i=1;i<n;i++){
            if(i==n-1) return jumps;
            
            maxReach = Math.max(maxReach,i+arr[i]);
            
            steps--;
            
            if(steps==0){
                jumps++;
                if(i>=maxReach) return -1;
                steps=maxReach-i;
            }
            
        }
        
        
        return jumps;
    }
}


 N = 11 
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 


dry run : - 

i=0 , mR=1, steps=1, jumps=1
i=1 , mR=4, steps=0, jumps=2, steps=3
i=2 , mR=7, steps=2, jumps=2, steps=2
i=3 , mR=11, steps=1, jumps=2, steps=2
i=4 , mR=13, steps=0, jumps=3, steps=9

so we will get total 3 jumps in total